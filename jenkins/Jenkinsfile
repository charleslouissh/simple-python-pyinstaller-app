pipeline {
    agent none 
    /* 
    Aucun agent global ne sera alloué pour toute l'exécution du Pipeline.
    Chaque étape doit spécifier sa propre section agent.
    */

    stages {
        stage('Construction') { // Définit une étape appelée Construction qui apparaît sur l'interface utilisateur de Jenkins.
            agent {
                docker {
                    image 'python:2-alpine' 
                    /*
                    Télécharge l'image Docker python:2-alpine (si elle n'est pas déjà disponible sur votre machine) 
                    et exécute cette image comme un conteneur séparé. 
                    
                    Cela se traduit par :
                    Vous aurez des conteneurs Jenkins et Python séparés s'exécutant localement dans Docker.
                    Le conteneur Python devient l'agent que Jenkins utilise pour exécuter l'étape de construction 
                    de votre projet Pipeline. Cependant, ce conteneur est de courte durée - sa durée de vie est 
                    seulement celle de l'exécution de votre étape de construction.
                    */
                }
            }
            steps {
                sh 'python -m py_compile sources/add2vals.py sources/calc.py' 
                /*
                Cette étape sh exécute la commande Python pour compiler votre application et sa bibliothèque calc en 
                fichiers binaires (chacun avec l'extension .pyc), qui sont placés dans le répertoire workspace 
                sources (dans le répertoire /var/jenkins_home/workspace/simple-python-pyinstaller-app dans le conteneur Jenkins).
                */

                stash(name: 'compiled-results', includes: 'sources/*.py*') 
                /*
                Cette étape enregistre le code source Python et les fichiers de code d'octet compilés 
                (avec l'extension .pyc) du répertoire de l'espace de travail des sources pour les utiliser 
                dans des étapes ultérieures.
                */
            }
        }
        stage('Test') {  // Définit une étape appelée Test qui apparaît sur l'interface utilisateur de Jenkins.
            agent {
                docker {
                    image 'qnib/pytest'
                }
            }
            steps {
                sh 'py.test --junit-xml test-reports/results.xml sources/test_calc.py'
                /*
                Cette étape sh exécute la commande py.test de pytest sur sources/test_calc.py, qui exécute un ensemble de tests 
                unitaires (définis dans test_calc.py) sur la fonction add2 de la bibliothèque "calc" (utilisée par votre 
                application Python simple add2vals). Le : --junit-xml test-reports/results.xml permet à py.test de générer un 
                rapport JUnit XML, qui est sauvegardé dans test-reports/results.xml (dans le répertoire 
                /var/jenkins_home/workspace/simple-python-pyinstaller-app du conteneur Jenkins).
                */
            }
            post {
                always {
                    junit 'test-reports/results.xml'
                    /*
                    Cette étape junit (fournie par le plugin JUnit) archive le rapport XML JUnit (généré par la commande 
                    py.test ci-dessus) et expose les résultats via l'interface Jenkins. Dans Blue Ocean, les résultats 
                    sont accessibles via la page Tests d'une exécution Pipeline. La condition always de la section post qui 
                    contient cette étape junit garantit que l'étape est toujours exécutée à la fin de l'étape Test, quel que 
                    soit le résultat de l'étape.
                    */
                }
            }
        }
    }
}