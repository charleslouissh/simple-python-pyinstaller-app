pipeline {
    agent none 
    /* 
    Aucun agent global ne sera alloué pour toute l'exécution du Pipeline.
    Chaque étape doit spécifier sa propre section agent.
    */

    options {
        skipStagesAfterUnstable()
    }

    stages {
        stage('Construction') { // Définit une étape appelée Construction qui apparaît sur l'interface utilisateur de Jenkins.
            agent {
                docker {
                    image 'python:2-alpine' 
                    /*
                    Télécharge l'image Docker python:2-alpine (si elle n'est pas déjà disponible sur votre machine) 
                    et exécute cette image comme un conteneur séparé. 
                    
                    Cela se traduit par :
                    Vous aurez des conteneurs Jenkins et Python séparés s'exécutant localement dans Docker.
                    Le conteneur Python devient l'agent que Jenkins utilise pour exécuter l'étape de construction 
                    de votre projet Pipeline. Cependant, ce conteneur est de courte durée - sa durée de vie est 
                    seulement celle de l'exécution de votre étape de construction.
                    */
                }
            }
            steps {
                sh 'python -m py_compile sources/add2vals.py sources/calc.py' 
                /*
                Cette étape sh exécute la commande Python pour compiler votre application et sa bibliothèque calc en 
                fichiers binaires (chacun avec l'extension .pyc), qui sont placés dans le répertoire workspace 
                sources (dans le répertoire /var/jenkins_home/workspace/simple-python-pyinstaller-app dans le conteneur Jenkins).
                */

                stash(name: 'compiled-results', includes: 'sources/*.py*') 
                /*
                Cette étape enregistre le code source Python et les fichiers de code d'octet compilés 
                (avec l'extension .pyc) du répertoire de l'espace de travail des sources pour les utiliser 
                dans des étapes ultérieures.
                */
            }
        }

        stage('Test') {  // Définit une étape appelée Test qui apparaît sur l'interface utilisateur de Jenkins.
            agent {
                docker {
                    image 'qnib/pytest'
                }
            }
            steps {
                sh 'py.test --junit-xml test-reports/results.xml sources/test_calc.py'
                /*
                Cette étape sh exécute la commande py.test de pytest sur sources/test_calc.py, qui exécute un ensemble de tests 
                unitaires (définis dans test_calc.py) sur la fonction add2 de la bibliothèque "calc" (utilisée par votre 
                application Python simple add2vals). Le : --junit-xml test-reports/results.xml permet à py.test de générer un 
                rapport JUnit XML, qui est sauvegardé dans test-reports/results.xml (dans le répertoire 
                /var/jenkins_home/workspace/simple-python-pyinstaller-app du conteneur Jenkins).
                */
            }
            post {
                always {
                    junit 'test-reports/results.xml'
                    /*
                    Cette étape junit (fournie par le plugin JUnit) archive le rapport XML JUnit (généré par la commande 
                    py.test ci-dessus) et expose les résultats via l'interface Jenkins. Dans Blue Ocean, les résultats 
                    sont accessibles via la page Tests d'une exécution Pipeline. La condition always de la section post qui 
                    contient cette étape junit garantit que l'étape est toujours exécutée à la fin de l'étape Test, quel que 
                    soit le résultat de l'étape.
                    */
                }
            }
        }

        stage('Livraison') {  // Définit une étape appelée Livraison qui apparaît sur l'interface utilisateur de Jenkins.
            agent any
            environment {
                // Ce bloc d'environnement définit deux variables qui seront utilisées plus tard dans l'étape "Livraison".
                VOLUME = '$(pwd)/sources:/src'
                IMAGE = 'cdrx/pyinstaller-linux:python2'
            }
            steps {
                dir(path: env.BUILD_ID) {
                    /*
                    	Cette étape dir crée un nouveau sous-répertoire nommé par le numéro de build. 
                        Le programme final sera créé dans ce répertoire par pyinstaller. 
                        BUILD_ID est une des variables d'environnement prédéfinies de Jenkins et est 
                        disponible dans tous les travaux.
                    */
                    unstash(name: 'compiled-results')
                    /*
                    Cette étape unstash restaure le code source Python et les fichiers de code d'octet compilés 
                    (avec l'extension .pyc) à partir de l'image stash sauvegardée précédemment
                    (si elle n'est pas déjà disponible sur votre machine) et exécute cette image comme un conteneur 
                    séparé. Cela signifie que :
                    Vous aurez des conteneurs Jenkins et PyInstaller (pour Linux) séparés fonctionnant localement dans Docker.
                    Le conteneur PyInstaller devient l'agent que Jenkins utilise pour exécuter l'étape Deliver de votre projet 
                    Pipeline. La durée de vie de ce conteneur est égale à la durée d'exécution de l'étape Deliver.
                    */
                    sh "docker run --rm -v ${VOLUME} ${IMAGE} 'pyinstaller -F add2vals.py'"
                    /*
                    Cette étape sh (de la section des étapes) exécute la commande pyinstaller (dans le conteneur PyInstaller) 
                    sur votre application Python simple. Cela regroupe votre application Python add2vals.py dans un seul 
                    fichier exécutable autonome (via l'option --onefile) et envoie ce fichier dans le répertoire dist workspace 
                    (dans le répertoire d'origine de Jenkins). Bien que cette étape consiste en une seule commande, en règle 
                    générale, il est préférable de garder le code de votre Pipeline (c'est-à-dire le fichier Jenkins) aussi 
                    ordonné que possible et de placer les étapes de construction plus complexes (en particulier pour les étapes 
                    composées de 2 ou plusieurs étapes) dans des fichiers de script shell séparés comme le fichier deliver.sh. 
                    En fin de compte, cela facilite la maintenance du code de votre Pipeline, surtout si votre Pipeline devient 
                    plus complexe.
                    */
                }
            }
            post {
                success {
                    archiveArtifacts "${env.BUILD_ID}/sources/dist/add2vals"
                    /*
                    L'étape archiveArtifacts (fournie dans le noyau de Jenkins) archive le fichier exécutable autonome 
                    (généré par la commande pyinstaller ci-dessus dans le répertoire dist/add2vals de l'espace de travail de 
                    Jenkins) et expose ce fichier à travers l'interface de Jenkins. Dans Blue Ocean, les artefacts archivés 
                    comme ceux-ci sont accessibles via la page Artifacts d'une exécution Pipeline. La condition de succès de 
                    la section post qui contient cette étape archiveArtifacts garantit que l'étape est exécutée à la fin de
                    l'étape Deliver uniquement si cette étape s'est terminée avec succès.
                    */
                    sh "docker run --rm -v ${VOLUME} ${IMAGE} 'rm -rf build dist'"
                }
            }
        }
    }
}